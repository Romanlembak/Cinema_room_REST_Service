type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }

    test {
        jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.PresentationError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
    import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final int totalRows = 9;
        private static final int totalCols = 9;
        private static final Gson gson = new Gson();

        private static String token = "";

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                        resp.getRequest().getMethod() + " " +
                                resp.getRequest().getLocalUri() +
                                " should respond with status code " + status + ", " +
                                "responded: " + resp.getStatusCode() + "\n\n" +
                                "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();

            JsonArrayBuilder arrayBuilder = isArray(totalRows * totalCols);
            for (int i = 1; i <= totalRows; i++) {
                for (int j = 1; j <= totalCols; j++) {
                    int price = i < 5 ? 10 : 8;
                    JsonObjectBuilder objectBuilder = isObject()
                            .value("row", i)
                            .value("column", j)
                            .value("price", price);
                    arrayBuilder = arrayBuilder.item(objectBuilder);
                }
            }
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("seats", arrayBuilder)
                            .value("columns", 9)
                            .value("rows", 9)
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 1)
                                                    .value("column", 1)
                                                    .value("price", 10)
                                    )
                    );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "10",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "10"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "-1",
                            "column", "-1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 2,
                            "column", 5
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 2)
                                                    .value("column", 5)
                                                    .value("price", 10)
                                    )
                    );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            try {
                response = post(
                        "/return",
                        gson.toJson(Map.of(
                                "token", wrongToken
                        ))
                ).send();
            } catch (PresentationError e) {
                return CheckResult.wrong("An error occurred while trying to send POST /return with wrong token. " +
                        "In such scenario your program should respond with a 400 status code.");
            }

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("ticket",
                                    isObject()
                                            .value("row", 2)
                                            .value("column", 5)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = get("/stats").addParams(Map.of()).send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_PASSWORD_MESSAGE)
                            .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = get("/stats").addParams(requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("purchased", numberOfPurchasedTickets)
                            .value("income", currentIncome)
                            .value("available", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", token
                    ))
            ).send();

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("ticket",
                                    isObject()
                                            .value("row", 7)
                                            .value("column", 4)
                                            .value("price", 8)
                            )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "7",
                            "column", "4"
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 7)
                                                    .value("column", 4)
                                                    .value("price", 8)
                                    )
                    );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testTokenInvalidation() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            return CheckResult.correct();
        }

        CheckResult testReturnedTicketAvailability() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
                this::testEndpoint,
                this::testEndpointAvailableSeats,
                this::testPurchaseTicket,
                this::testErrorMessageThatTicketHasBeenPurchased,
                this::testErrorMessageThatNumbersOutOfBounds,
                this::testReturnTicket,
                this::testStatsEndpoint,
                () -> testStats(1, 10, 80),
                this::testPurchaseAnotherTicket,
                () -> testStats(2, 18, 79),
                this::returnTicket,
                () -> testStats(1, 10, 80),
                this::testTokenInvalidation,
                this::testReturnedTicketAvailability
        };
    }
  learner_created: false
- name: src/cinema/controller/Controller.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.exception.BookingException;
    import cinema.exception.WrongTokenException;
    import cinema.pojo.CinemaRoom;
    import cinema.pojo.Seat;
    import jakarta.validation.Valid;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.List;
    import java.util.Map;
    import java.util.Set;
    import java.util.UUID;
    import java.util.concurrent.ConcurrentHashMap;
    import java.util.concurrent.ConcurrentMap;

    @RestController
    public class Controller {
        private final CinemaRoom cinemaRoom;
        private final ConcurrentMap<String, Seat> bookedSeats;

        public Controller() {
            cinemaRoom = new CinemaRoom(9, 9);
            bookedSeats = new ConcurrentHashMap<>();
        }

        @GetMapping("/seats")
        public CinemaRoom getCinemaRoom() {
            return cinemaRoom;
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> book(@Valid @RequestBody Seat seat) {
            Set<Seat> seats = cinemaRoom.getSeats();
            if (!seats.contains(seat)) {
                throw new BookingException("The ticket has been already purchased!");
            }
            seats.remove(seat);
            String token = UUID.randomUUID().toString();
            bookedSeats.put(token, seat);
            seat.setPrice(seat.getRow() <= 4 ? 10 : 8);
            return ResponseEntity.ok(Map.of("token", token, "ticket", seat));
        }

        @PostMapping("/return")
        public ResponseEntity<?> book(@RequestBody Map<String, String> map) {
            String token = map.get("token");
            if (!bookedSeats.containsKey(token)) {
                throw new WrongTokenException("Wrong token!");
            }
            Seat seat = bookedSeats.get(token);
            bookedSeats.remove(token);
            cinemaRoom.getSeats().add(seat);
            return ResponseEntity.ok(Map.of("ticket", seat));
        }
    }
  learner_created: true
- name: src/cinema/pojo/Seat.java
  visible: true
  text: |
    package cinema.pojo;

    import jakarta.validation.constraints.Max;
    import jakarta.validation.constraints.Min;
    import jakarta.validation.constraints.Size;
    import org.springframework.lang.Nullable;

    import java.util.Objects;

    public class Seat implements Comparable<Seat>{
        @Min(1)
        @Max(9)
        private int row;
        @Min(1)
        @Max(9)
        private int column;
        @Nullable
        private int price;

        public Seat() {
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            price = getRow() <= 4 ? 10 : 8;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        @Override
        public int compareTo(Seat otherSeat) {
            int result = getRow() - otherSeat.getRow();
            if (result == 0) {
                result = getColumn() - otherSeat.getColumn();
            }
            return result;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Seat seat = (Seat) o;
            return row == seat.row && column == seat.column;
        }

        @Override
        public int hashCode() {
            return Objects.hash(row, column);
        }
    }
  learner_created: true
- name: src/cinema/exception/WrongTokenException.java
  visible: true
  text: |
    package cinema.exception;

    public class WrongTokenException extends RuntimeException {
        public WrongTokenException(String massage) {
            super(massage);
        }
    }
  learner_created: true
- name: src/cinema/advice/Handler.java
  visible: true
  text: |-
    package cinema.advice;

    import cinema.exception.BookingException;
    import cinema.exception.WrongTokenException;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatusCode;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import java.util.Map;

    @ControllerAdvice
    public class Handler extends ResponseEntityExceptionHandler {
        @Override
        protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
            return new ResponseEntity<>(Map.of("error", "The number of a row or a column is out of bounds!"), headers, status);
        }

        @ExceptionHandler({BookingException.class, WrongTokenException.class})
        private ResponseEntity<Object> handleBookingException(RuntimeException e) {
            return new ResponseEntity<>(Map.of("error", e.getMessage()), HttpStatusCode.valueOf(400));
        }
    }
  learner_created: true
- name: src/cinema/pojo/CinemaRoom.java
  visible: true
  text: |
    package cinema.pojo;

    import java.util.*;
    import java.util.concurrent.CopyOnWriteArrayList;

    public class CinemaRoom {
        private int rows;
        private int columns;
        private Set<Seat> seats;

        public CinemaRoom() {
        }

        public CinemaRoom(int rows, int columns) {
            this.rows = rows;
            this.columns = columns;
            seats = Collections.synchronizedSet(new TreeSet<Seat>( Comparator.naturalOrder()));
            initSeats(rows, columns);
        }

        private void initSeats(int rows, int columns) {
            for (int i = 1; i <= rows; i++) {
                for (int j = 1; j <= columns; j++) {
                    seats.add(new Seat(i, j));
                }
            }
        }

        public int getRows() {
            return rows;
        }

        public void setRows(int rows) {
            this.rows = rows;
        }

        public int getColumns() {
            return columns;
        }

        public void setColumns(int columns) {
            this.columns = columns;
        }

        public Set<Seat> getSeats() {
            return seats;
        }

        public void setSeats(Set<Seat> seats) {
            this.seats = Collections.synchronizedSet(new TreeSet<>(seats));
        }
    }
  learner_created: true
- name: src/cinema/exception/BookingException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.web.bind.annotation.ResponseStatus;

    public class BookingException extends RuntimeException{
        public BookingException(String massage) {
            super(massage);
        }
    }
  learner_created: true
- name: src/cinema/exception/WrongPasswordException.java
  visible: true
  learner_created: true
- name: src/cinema/config/AppConfig.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Thu, 30 Nov 2023 23:45:49 UTC"
record: -1
